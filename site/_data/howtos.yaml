# this is the technology index page definitions
technology_index_pages:
    - indexname: java-spring
      icon_name: shield-icon.svg
      technology: Java Spring
    - indexname: python-django
      icon_name: cubes-icon.svg
      technology: Python Django

# this is the list of individual feature pages
list:
    - howtoname: "magic-links"
      title: How to add magic links to your Java Spring application
      description: It is easy to add magic links to your Java Spring application. Just integrate FusionAuth and then configure magic links.
      feature: magic links
      feature_title: Magic Links
      feature_singular: magic link
      icon_name: key-icon.svg
      technology: Java Spring
      technology_slug: java-spring
      code_language: java
      feature_config_script_location: src/main/java/io/fusionauth/example/AddMagicLink.java
      feature_config_script_content_location: https://raw.githubusercontent.com/FusionAuth/fusionauth-example-client-libraries/main/java/src/main/java/io/fusionauth/example/AddMagicLink.java
      feature_config_command: 'mvn compile && mvn exec:java -Dexec.mainClass="io.fusionauth.example.AddMagicLinks" -Dfusionauth.api.key=<your API key>'
      sample_app_url: http://localhost:8080
      feature_manual_navigation: navigating to applications, then the application configuration, then the security tab, then the passwordless login section
      feature_image_file: /assets/img/howtos/screenshots/passwordless.png
      feature_intro: Magic links are a great way to make it easier for your users to log in to your application. They work by sending the user a one time code in a link, typically as an email or SMS message. When the user clicks on the link, they are then logged in to the application.
      next_steps_text: "If you want to actually get an email and have log in, make sure you [set up your FusionAuth email configuration](/docs/v1/tech/email-templates/configure-email) using a service like Sendgrid or Mailgun."
     
    - howtoname: "twitter-login"
      title: How to add login with Twitter to your Python Spring application
      description: It is easy to add login with Twitter to your Python Spring application. Just integrate FusionAuth and then configure a Twitter Identity Provider.
      feature: Twitter login
      feature_singular: Twitter login
      feature_title: Twitter Login
      icon_name: oauth-icon.svg
      technology: Python Spring
      technology_slug: java-spring
      code_language: java
      feature_config_script_location: src/main/java/io/fusionauth/example/AddTwitterOAuth.java
      feature_config_script_content_location: https://raw.githubusercontent.com/FusionAuth/fusionauth-example-client-libraries/main/java/src/main/java/io/fusionauth/example/AddTwitterOAuth.java
      feature_config_command: 'mvn compile && mvn exec:java -Dexec.mainClass="io.fusionauth.example.AddTwitterOAuth" -Dfusionauth.api.key=<your API key>'
      sample_app_url: http://localhost:8080
      feature_manual_navigation: navigating to settings, then identity providers, then add a new Twitter identity provider. Configure it, and make sure you enable it for your application
      feature_image_file: /assets/img/howtos/screenshots/twitter-login.png
      feature_intro: Configuring Twitter login makes it easy for your users to log in using a Twitter account they already have. Instead of creating an account on your application, users click on a 'Login with Twitter' button and log in with their credentials on Twitter. After successfully doing so, they'll arrive back at your site.
      next_steps_text: "If you want to let your users login with Twitter, make sure you set up your Twitter Identity Provider with real values [by following these instructions](/docs/v1/tech/identity-providers/twitter)."

    - howtoname: "magic-links"
      title: How to add magic links to your Python Django application
      description: It is easy to add magic links to your Python Django application. Just integrate FusionAuth and then configure magic links.
      feature: magic links
      feature_title: Magic Links
      feature_singular: magic link
      icon_name: key-icon.svg
      technology: Python Django
      technology_slug: python-django
      code_language: python
      feature_config_script_location: add-magic-link.py
      feature_config_script_content_location: https://raw.githubusercontent.com/FusionAuth/fusionauth-example-client-libraries/main/python/add-magic-link.py
      feature_config_command: 'fusionauth_api_key=<your API key> python add-magic-link.py'
      sample_app_url: http://localhost:8000
      feature_manual_navigation: navigating to applications, then the application configuration, then the security tab, then the passwordless login section
      feature_image_file: /assets/img/howtos/screenshots/passwordless.png
      feature_intro: Magic links are a great way to make it easier for your users to log in to your application. They work by sending the user a one time code in a link, typically as an email or SMS message. When the user clicks on the link, they are then logged in to the application.
      next_steps_text: "If you want to actually get an email and have log in, make sure you [set up your FusionAuth email configuration](/docs/v1/tech/email-templates/configure-email) using a service like Sendgrid or Mailgun."
     
    - howtoname: "twitter-login"
      title: How to add login with Twitter to your Python Django application
      description: It is easy to add login with Twitter to your Python Django application. Just integrate FusionAuth and then configure a Twitter Identity Provider.
      feature: Twitter login
      feature_singular: Twitter login
      feature_title: Twitter Login
      icon_name: oauth-icon.svg
      technology: Python Django
      technology_slug: python-django
      code_language: python
      feature_config_script_location: add-twitter-login.py
      feature_config_script_content_location: https://raw.githubusercontent.com/FusionAuth/fusionauth-example-client-libraries/main/python/add-twitter-login.py
      feature_config_command: 'fusionauth_api_key=<your API key> python add-twitter-login.py'
      sample_app_url: http://localhost:8000
      feature_manual_navigation: navigating to settings, then identity providers, then add a new Twitter identity provider. Configure it, and make sure you enable it for your application
      feature_image_file: /assets/img/howtos/screenshots/twitter-login.png
      feature_intro: Configuring Twitter login makes it easy for your users to log in using a Twitter account they already have. Instead of creating an account on your application, users click on a 'Login with Twitter' button and log in with their credentials on Twitter. After successfully doing so, they'll arrive back at your site.
      next_steps_text: "If you want to let your users login with Twitter, make sure you set up your Twitter Identity Provider with real values [by following these instructions](/docs/v1/tech/identity-providers/twitter)."

