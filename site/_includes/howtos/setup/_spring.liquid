Now you are going to create a Spring application. While this is starting with a simple Spring application, you can use the same configuration to integrate your Spring application with FusionAuth.

First, make a directory:

```
mkdir ../setup-spring && cd ../setup-spring
```

Then, install the following files in these locations.

Put a `pom.xml` file at the top level. Here are the contents of this file:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>io.fusionauth.example</groupId>
	<artifactId>FusionAuthSpring</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>FusionAuthSpring</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
```

Then, you need to create two directories:

```
mkdir -p src/main/resources/templates && \
mkdir -p src/main/java/io/fusionauth/example/spring/config
``

Paste the below into `src/main/resources/application.properties`. This is mostly the OAuth configuration you need.

```properties
spring.thymeleaf.cache=false
spring.thymeleaf.enabled=true 
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

spring.application.name=FusionAuth Spring Example

spring.security.oauth2.client.registration.fusionauth-client.client-id=e9fdb985-9173-4e01-9d73-ac2d60d1dc8e
spring.security.oauth2.client.registration.fusionauth-client.client-secret=change-this-in-production-to-be-a-real-secret
spring.security.oauth2.client.registration.fusionauth-client.scope=email,openid,profile
spring.security.oauth2.client.registration.fusionauth-client.redirect-uri=http://localhost:8080/login/oauth2/code/fusionauth
spring.security.oauth2.client.registration.fusionauth-client.client-name=fusionauth
spring.security.oauth2.client.registration.fusionauth-client.provider=fusionauth
spring.security.oauth2.client.registration.fusionauth-client.client-authentication-method=basic
spring.security.oauth2.client.registration.fusionauth-client.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.fusionauth.authorization-uri=http://localhost:9011/oauth2/authorize
spring.security.oauth2.client.provider.fusionauth.token-uri=http://localhost:9011/oauth2/token
spring.security.oauth2.client.provider.fusionauth.user-info-uri=http://localhost:9011/oauth2/userinfo?schema=openid
spring.security.oauth2.client.provider.fusionauth.user-name-attribute=name
spring.security.oauth2.client.provider.fusionauth.user-info-authentication-method=header
spring.security.oauth2.client.provider.fusionauth.jwk-set-uri=http://localhost:9011/.well-known/jwks.json
```

Then put this HTML in the `src/main/resources/templates/home.html` file. This is going to be the page unauthenticated users see.

```html
<html xmlns:th="http://www.w3.org/1999/xhtml" lang="en">
<head><title>Home Page</title></head>
<body>
	<h1>Hello !</h1>
	<p>Welcome to <span th:text="${appName}">Our App</span></p>

	<p>You can view your profile <a href="/profile">here</a></p>
</body>
</html>
```

And this HTML in the `src/main/resources/templates/profile.html` file. This is going to be the page authenticated users can access. This will only show a JSON representation of the user, but you could put other protected information in this page.

```html
<html xmlns:th="http://www.w3.org/1999/xhtml" lang="en">
<head><title>User Profile</title></head>
<body>
	<h1>Welcome to the protected User page. Below is your OpenID profile information.</h1>
	<p>Profile: <span th:text="${profile}"></span></p>

	<h2>You can logout here: <a href="http://localhost:9011/oauth2/logout?client_id=e9fdb985-9173-4e01-9d73-ac2d60d1dc8e">Logout</a></h2>
</body>
</html>
```

Then, you need to add the java files that comprise your Spring application. There are four: 

* An application startup class
* A configuration class
* Two controllers for the pages you added above

Let's add the startup file first. In `src/main/java/io/fusionauth/example/spring/FusionAuthSpringApplication.java`, put this code:

```java
package io.fusionauth.example.spring;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FusionAuthSpringApplication {

	public static void main(String[] args) {
		SpringApplication.run(FusionAuthSpringApplication.class, args);
	}

}
```

Next, the configuration class. In `src/main/java/io/fusionauth/example/spring/config/SecurityConfiguration.java`, put this code:

```java
package io.fusionauth.example.spring.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizationRequestResolver;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestCustomizers;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfiguration {

  @Bean
  public SecurityFilterChain filterChain(HttpSecurity http, ClientRegistrationRepository repo)
      throws Exception {

    var base_uri = OAuth2AuthorizationRequestRedirectFilter.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI;
    var resolver = new DefaultOAuth2AuthorizationRequestResolver(repo, base_uri);

    resolver.setAuthorizationRequestCustomizer(OAuth2AuthorizationRequestCustomizers.withPkce());

    http
        .authorizeRequests(a -> a
            .antMatchers("/").permitAll()
            .anyRequest().authenticated())
        .oauth2Login(login -> login.authorizationEndpoint().authorizationRequestResolver(resolver));

    http.logout(logout -> logout
        .logoutSuccessUrl("/"));

    return http.build();
  }
}
```

Finally, create the home and profile controllers which back the HTML templates above.

Here's the home controller, which should live in `src/main/java/io/fusionauth/example/spring/FusionAuthSpringApplication.java`, which should contain this code:

```java
package io.fusionauth.example.spring;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HomeController {

  @Value("${spring.application.name}")
  String appName;

  @RequestMapping("/")
  public String homePage(Model model) {
      model.addAttribute("appName", appName);
      return "home";
  }  
}
```

Here's the profile controller, which should live in `src/main/java/io/fusionauth/example/spring/HomeController.java`. It should have this code:

```java
package io.fusionauth.example.spring;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class ProfileController {

  public ProfileController() {

  } 

  @RequestMapping("/profile")
  public String userPage(Model model, @AuthenticationPrincipal OidcUser principal) {
    if (principal != null) {
      model.addAttribute("profile", principal.getClaims());
    }
    return "profile";
  }
}
```

Once you've set these up, you can start up the Spring application using this command: `mvn spring-boot:run`.

You can now open up an incognito window and visit [the Spring app](http://localhost:8080). Log in using the user you added in FusionAuth, and you'll see a JSON output of your profile on the profile page.
