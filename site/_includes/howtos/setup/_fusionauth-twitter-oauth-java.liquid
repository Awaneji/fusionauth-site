Now, let's enable login with Twitter. Let's create another FusionAuth script, since to set up {{page.feature}}, all you need to do is tweak some FusionAuth configuration. First, go back to the `fusionauth-setup` directory:

```
cd ../setup-fusionauth
```

You'll use the same client library and API key, but run different commands.

Put the below code in `src/main/java/io/fusionauth/example/AddTwitterOAuth.java`.

```java
{% remote_include https://raw.githubusercontent.com/FusionAuth/fusionauth-example-java-jwt/main/src/main/java/io/fusionauth/example/jwt/Hmac.java %}
```

You can run this by using a similar mvn command:

```shell
mvn compile && mvn exec:java -Dexec.mainClass="io.fusionauth.example.AddTwitterOAuth" -Dfusionauth.api.key=<your API key>
```

Now, test to see that you have {{page.feature}} enabled for your application. Close any other incognito windows you have open and then open a new one. (This ensures you've logged out of the application.)

Visit [the spring java application](http://localhost:8080) and log in again. Now, on the login page, you should see a {{page.feature}} button.

TBD image?

If you want to click it and have it work, make sure you set up your Twitter OAuth Provider with real values [by following these instructions](/docs/v1/tech/identity-providers/twitter).




